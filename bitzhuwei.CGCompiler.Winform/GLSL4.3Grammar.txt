
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
declaration_or_expression_statement:
	declaration_statement
	expression_statement
///////////////////////////////////////////////////////////////////////////////////////
statement:
	compound_statement
	simple_statement
// Grammar Note: labeled statements for SWITCH only; 'goto' is not supported.
simple_statement:
	declaration_or_expression_statement
	selection_statement
	switch_statement
	case_label
	iteration_statement
	jump_statement
selection_statement:
	IF LEFT_PAREN expression RIGHT_PAREN selection_rest_statement
selection_rest_statement:
	statement selection_rest_statement_2
selection_rest_statement_2:
	ELSE statement
	null
switch_statement:
	SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE switch_statement_list RIGHT_BRACE
switch_statement_list:
	statement_list_nullable
case_label:
	CASE expression COLON
	DEFAULT COLON
iteration_statement:
	WHILE LEFT_PAREN condition RIGHT_PAREN statement_no_new_scope
	DO statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON
	FOR LEFT_PAREN for_init_statement for_rest_statement RIGHT_PAREN statement_no_new_scope
for_init_statement:
	declaration_or_expression_statement
expression_statement:
	SEMICOLON
	expression SEMICOLON
declaration_statement:
	declaration
declaration:
	PRECISION precision_qualifier type_specifier SEMICOLON
	type_specifier declaration_2
	type_qualifier declaration_3
declaration_3:
	VOID array_specifier_nullable declaration_3_1
	struct_specifier array_specifier_nullable declaration_3_2
	// special qualifiered difinition
	SEMICOLON
	IDENTIFIER declaration_3_3
declaration_3_3:
	//// TYPE_NAME , identifierp[0] = 123 ... 
	//COMMA IDENTIFIER array_specifier_nullable equal_initializer_nullable init_declarator_list_2
	//// special qualifiered difinition
	//COMMA IDENTIFIER identifier_list_2 SEMICOLON // , identifier ... ;
	//// init_declarator_list SEMICOLON
	//// TYPE_NAME
	//null
	//// special qualifiered difinition
	//SEMICOLON
	// 用下面的候选式代替上面4个候选式
	init_declarator_list_2 semicolon_or_null
	//
	LEFT_BRACKET constant_expression_or_null RIGHT_BRACKET array_specifier_nullable declaration_3_3_1
	IDENTIFIER declaration_3_3_2
	// init_declarator_list SEMICOLON
	// struct's definition and its variable
	LEFT_BRACE struct_declaration_list RIGHT_BRACE variable_name_or_null SEMICOLON
semicolon_or_null:
	SEMICOLON
	null
declaration_3_3_2:
	// function_prototype SEMICOLON
	// TYPE_NAME
	LEFT_PAREN function_parameters_or_null RIGHT_PAREN SEMICOLON
	// init_declarator_list SEMICOLON
	// TYPE_NAME
	array_specifier_nullable equal_initializer_nullable init_declarator_list_2
declaration_3_3_1:
	IDENTIFIER declaration_3_3_1_1
	// init_declarator_list SEMICOLON
	// TYPE_NAME
	init_declarator_list_2
declaration_3_3_1_1:
	// function_prototype SEMICOLON
	// TYPE_NAME
	LEFT_PAREN function_parameters_or_null RIGHT_PAREN SEMICOLON
	// init_declarator_list SEMICOLON
	// TYPE_NAME
	array_specifier_nullable equal_initializer_nullable init_declarator_list_2
declaration_3_2:
	IDENTIFIER declaration_3_2_1
	// init_declarator_list SEMICOLON
	// 注：build_in_type 作为普通的 IDENTIFIER 存在，或者说没有内置类型
	init_declarator_list_2
declaration_3_2_1:
	// function_prototype SEMICOLON
	// 注：build_in_type 作为普通的 IDENTIFIER 存在，或者说没有内置类型
	LEFT_PAREN function_parameters_or_null RIGHT_PAREN SEMICOLON
	// init_declarator_list SEMICOLON
	// 注：build_in_type 作为普通的 IDENTIFIER 存在，或者说没有内置类型
	array_specifier_nullable equal_initializer_nullable init_declarator_list_2
declaration_3_1:
	IDENTIFIER declaration_3_1_1
	// init_declarator_list SEMICOLON
	init_declarator_list_2
declaration_3_1_1:
	// function_prototype SEMICOLON
	LEFT_PAREN function_parameters_or_null RIGHT_PAREN SEMICOLON
	// init_declarator_list SEMICOLON
	array_specifier_nullable equal_initializer_nullable init_declarator_list_2
declaration_2:
	// init_declarator_list SEMICOLON
	init_declarator_list_2
	IDENTIFIER declaration_2_1
declaration_2_1:
	// function_prototype SEMICOLON
	LEFT_PAREN function_parameters_or_null RIGHT_PAREN SEMICOLON
	// init_declarator_list SEMICOLON
	array_specifier_nullable equal_initializer_nullable init_declarator_list_2
function_prototype:
	type_specifier IDENTIFIER LEFT_PAREN function_parameters_or_null RIGHT_PAREN
	type_qualifier type_specifier IDENTIFIER LEFT_PAREN function_parameters_or_null RIGHT_PAREN
function_declarator:
	function_header function_parameters_or_null
function_parameters_or_null:
	parameter_declaration function_header_with_parameters_2
	null
function_header_with_parameters:
	function_header parameter_declaration function_header_with_parameters_2
function_header_with_parameters_2:
	COMMA parameter_declaration function_header_with_parameters_2
	null
function_header:
	fully_specified_type IDENTIFIER LEFT_PAREN
parameter_declaration:
	type_specifier variable_name_or_null
	type_qualifier type_specifier variable_name_or_null
parameter_declarator:
	type_specifier IDENTIFIER array_specifier_nullable
parameter_type_specifier:
	type_specifier
init_declarator_list:
	single_declaration init_declarator_list_2
init_declarator_list_2:
	COMMA IDENTIFIER array_specifier_nullable equal_initializer_nullable init_declarator_list_2
	null
equal_initializer_nullable:
	EQUAL initializer
	null
initializer:
	assignment_expression
	LEFT_BRACE initializer_list comma_or_null RIGHT_BRACE
initializer_list:
	initializer initializer_list_2
initializer_list_2:
	COMMA initializer initializer_list_2
	null
comma_or_null:
	COMMA
	null
single_declaration:
	fully_specified_type variable_initializer_nullable
variable_initializer_nullable:
	IDENTIFIER array_specifier_nullable equal_initializer_nullable
	null
identifier_list_or_null:
	identifier_list
	null
identifier_list:
	IDENTIFIER identifier_list_2
identifier_list_2:
	COMMA IDENTIFIER identifier_list_2
	null
variable_name_or_null:
	IDENTIFIER array_specifier_nullable
	null
for_rest_statement:
	conditionopt SEMICOLON expression_or_null
conditionopt:
	condition
condition:
	expression
	// PDF中有：fully_specified_type IDENTIFIER EQUAL initializer
	// 经试验发现这是扯淡，于是删除了
statement_no_new_scope:
	compound_statement_no_new_scope
	simple_statement
compound_statement_no_new_scope:
	LEFT_BRACE statement_list_nullable RIGHT_BRACE
jump_statement:
	CONTINUE SEMICOLON
	BREAK SEMICOLON
	RETURN expression_or_null SEMICOLON
	DISCARD SEMICOLON // Fragment shader only.
expression_or_null:
	expression
	null
compound_statement:
	LEFT_BRACE statement_list_nullable RIGHT_BRACE
statement_list:
	statement statement_list_nullable
statement_list_nullable:
	statement statement_list_nullable
	null
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
expression:
	assignment_expression expression_2
expression_2:
	COMMA assignment_expression expression_2
	null
assignment_expression:
	unary_expression assignment_expression_2
unary_expression:
	postfix_expression
	INC_OP unary_expression
	DEC_OP unary_expression
	unary_operator unary_expression
postfix_expression:
	IDENTIFIER postfix_expression_3
	// primary_expression postfix_expression_2
	constant_primary_expression postfix_expression_2
	// primary_expression postfix_expression_2
	LEFT_PAREN expression RIGHT_PAREN postfix_expression_2
postfix_expression_3:
	LEFT_BRACKET integer_expression RIGHT_BRACKET postfix_expression_3_1
	// primary_expression postfix_expression_2
	DOT FIELD_SELECTION postfix_expression_2
	// primary_expression postfix_expression_2
	INC_OP postfix_expression_2
	// primary_expression postfix_expression_2
	DEC_OP postfix_expression_2
	// primary_expression postfix_expression_2
	null
	// function call + postfix_expression_2
	LEFT_PAREN expression_or_void_or_null RIGHT_PAREN postfix_expression_2
postfix_expression_3_1:
	// primary_expression postfix_expression_2
	postfix_expression_2
	// function call + postfix_expression_2
	LEFT_PAREN expression_or_void_or_null RIGHT_PAREN postfix_expression_2 // TODO: shader只支持一维的函数指针数组吗？
postfix_expression_2:
	LEFT_BRACKET integer_expression RIGHT_BRACKET postfix_expression_2
	DOT FIELD_SELECTION postfix_expression_2
	INC_OP postfix_expression_2
	DEC_OP postfix_expression_2
	null
FIELD_SELECTION: // PDF里没有，我猜测的
	IDENTIFIER
primary_expression:
	//variable_identifier
	IDENTIFIER
	constant_primary_expression
	LEFT_PAREN expression RIGHT_PAREN
constant_primary_expression:
	INTCONSTANT
	UINTCONSTANT
	FLOATCONSTANT
	BOOLCONSTANT
	DOUBLECONSTANT
unary_operator: // 一元运算符
	PLUS
	DASH
	BANG
	TILDE
///////////////////////////////////////////////////////////////////////////////////
expression_or_void_or_null:
	expression
	VOID
	null
// Grammar Note: Constructors look like functions, but lexical analysis recognized most of them as
// keywords. They are now recognized through “type_specifier”.
// Methods (.length), subroutine array calls, and identifiers are recognized through postfix_expression.

index_selector_nullable: // TODO: shader只支持一维的函数指针数组吗？
	LEFT_BRACKET integer_expression RIGHT_BRACKET
	null
integer_expression:
	expression
//////////////////////////////////////////////////////////////////////////////////////
assignment_expression_2:
	multiplicative_expression_2 additive_expression_2 shift_expression_2 relational_expression_2 equality_expression_2 and_expression_2 exclusive_or_expression_2 inclusive_or_expression_2 logical_and_expression_2 logical_xor_expression_2 logical_or_expression_2 conditional_expression_2
	assignment_operator assignment_expression
assignment_operator:
	EQUAL
	MUL_ASSIGN
	DIV_ASSIGN
	MOD_ASSIGN
	ADD_ASSIGN
	SUB_ASSIGN
	LEFT_ASSIGN
	RIGHT_ASSIGN
	AND_ASSIGN
	XOR_ASSIGN
	OR_ASSIGN
/////////////////////////////////////////////////////////////////
conditional_expression:
	logical_or_expression conditional_expression_2
conditional_expression_2:
	QUESTION expression COLON assignment_expression
	null
logical_or_expression:
	logical_xor_expression logical_or_expression_2
logical_or_expression_2:
	OR_OP logical_xor_expression logical_or_expression_2
	null
logical_xor_expression:
	logical_and_expression logical_xor_expression_2
logical_xor_expression_2:
	XOR_OP logical_and_expression logical_xor_expression_2
	null
logical_and_expression:
	inclusive_or_expression logical_and_expression_2
logical_and_expression_2:
	AND_OP inclusive_or_expression logical_and_expression_2
	null
inclusive_or_expression:
	exclusive_or_expression inclusive_or_expression_2
inclusive_or_expression_2:
	VERTICAL_BAR exclusive_or_expression inclusive_or_expression_2
	null
exclusive_or_expression:
	and_expression exclusive_or_expression_2
exclusive_or_expression_2:
	CARET and_expression exclusive_or_expression_2
	null
and_expression:
	equality_expression and_expression_2
and_expression_2:
	AMPERSAND equality_expression and_expression_2
	null
equality_expression:
	relational_expression equality_expression_2
equality_expression_2:
	EQ_OP relational_expression equality_expression_2
	NE_OP relational_expression equality_expression_2
	null
relational_expression:
	shift_expression relational_expression_2
relational_expression_2:
	LEFT_ANGLE shift_expression relational_expression_2
	RIGHT_ANGLE shift_expression relational_expression_2
	LE_OP shift_expression relational_expression_2
	GE_OP shift_expression relational_expression_2
	null
shift_expression:
	additive_expression shift_expression_2
shift_expression_2:
	LEFT_OP additive_expression shift_expression_2
	RIGHT_OP additive_expression shift_expression_2
	null
additive_expression:
	multiplicative_expression additive_expression_2
additive_expression_2:
	PLUS multiplicative_expression additive_expression_2
	DASH multiplicative_expression additive_expression_2
	null
multiplicative_expression:
	unary_expression multiplicative_expression_2
multiplicative_expression_2:
	STAR unary_expression multiplicative_expression_2
	SLASH unary_expression multiplicative_expression_2
	PERCENT unary_expression multiplicative_expression_2
	null
/////////////////////////////////////////////////////////////////////////////
fully_specified_type:
	type_specifier
	type_qualifier type_specifier
/////////////////////////////////////////////////////////////////////////////
type_specifier:
	type_specifier_nonarray array_specifier_nullable
array_specifier:
	LEFT_BRACKET constant_expression_or_null RIGHT_BRACKET array_specifier_nullable
array_specifier_nullable:
	LEFT_BRACKET constant_expression_or_null RIGHT_BRACKET array_specifier_nullable
	null
constant_expression_or_null:
	conditional_expression
	null
constant_expression:
	conditional_expression
type_specifier_nonarray:
	VOID
	// 注：build_in_type 作为普通的 IDENTIFIER 存在，或者说没有内置类型
	struct_specifier
	// TYPE_NAME
	IDENTIFIER
build_in_type:
	FLOAT
	DOUBLE
	INT
	UINT
	BOOL
	VEC2
	VEC3
	VEC4
	DVEC2
	DVEC3
	DVEC4
	BVEC2
	BVEC3
	BVEC4
	IVEC2
	IVEC3
	IVEC4
	UVEC2
	UVEC3
	UVEC4
	MAT2
	MAT3
	MAT4
	MAT2X2
	MAT2X3
	MAT2X4
	MAT3X2
	MAT3X3
	MAT3X4
	MAT4X2
	MAT4X3
	MAT4X4
	DMAT2
	DMAT3
	DMAT4
	DMAT2X2
	DMAT2X3
	DMAT2X4
	DMAT3X2
	DMAT3X3
	DMAT3X4
	DMAT4X2
	DMAT4X3
	DMAT4X4
	ATOMIC_UINT
	SAMPLER1D
	SAMPLER2D
	SAMPLER3D
	SAMPLERCUBE
	SAMPLER1DSHADOW
	SAMPLER2DSHADOW
	SAMPLERCUBESHADOW
	SAMPLER1DARRAY
	SAMPLER2DARRAY
	SAMPLER1DARRAYSHADOW
	SAMPLER2DARRAYSHADOW
	SAMPLERCUBEARRAY
	SAMPLERCUBEARRAYSHADOW
	ISAMPLER1D
	ISAMPLER2D
	ISAMPLER3D
	ISAMPLERCUBE
	ISAMPLER1DARRAY
	ISAMPLER2DARRAY
	ISAMPLERCUBEARRAY
	USAMPLER1D
	USAMPLER2D
	USAMPLER3D
	USAMPLERCUBE
	USAMPLER1DARRAY
	USAMPLER2DARRAY
	USAMPLERCUBEARRAY
	SAMPLER2DRECT
	SAMPLER2DRECTSHADOW
	ISAMPLER2DRECT
	USAMPLER2DRECT
	SAMPLERBUFFER
	ISAMPLERBUFFER
	USAMPLERBUFFER
	SAMPLER2DMS
	ISAMPLER2DMS
	USAMPLER2DMS
	SAMPLER2DMSARRAY
	ISAMPLER2DMSARRAY
	USAMPLER2DMSARRAY
	IMAGE1D
	IIMAGE1D
	UIMAGE1D
	IMAGE2D
	IIMAGE2D
	UIMAGE2D
	IMAGE3D
	IIMAGE3D
	UIMAGE3D
	IMAGE2DRECT
	IIMAGE2DRECT
	UIMAGE2DRECT
	IMAGECUBE
	IIMAGECUBE
	UIMAGECUBE
	IMAGEBUFFER
	IIMAGEBUFFER
	UIMAGEBUFFER
	IMAGE1DARRAY
	IIMAGE1DARRAY
	UIMAGE1DARRAY
	IMAGE2DARRAY
	IIMAGE2DARRAY
	UIMAGE2DARRAY
	IMAGECUBEARRAY
	IIMAGECUBEARRAY
	UIMAGECUBEARRAY
	IMAGE2DMS
	IIMAGE2DMS
	UIMAGE2DMS
	IMAGE2DMSARRAY
	IIMAGE2DMSARRAY
	UIMAGE2DMSARRAY
struct_specifier:
	STRUCT identifier_or_null LEFT_BRACE struct_declaration_list RIGHT_BRACE
identifier_or_null:
	IDENTIFIER
	null
struct_declaration_list:
	struct_declaration struct_declaration_list_nullable
struct_declaration_list_nullable:
	struct_declaration struct_declaration_list_nullable
	null
struct_declaration:
	type_specifier struct_declarator_list SEMICOLON
	type_qualifier type_specifier struct_declarator_list SEMICOLON
struct_declarator_list:
	struct_declarator struct_declarator_list_2
struct_declarator_list_2:
	COMMA struct_declarator struct_declarator_list_2
	null
struct_declarator:
	IDENTIFIER array_specifier_nullable
/////////////////////////////////////////////////////////////////////////////
type_qualifier:
	single_type_qualifier type_qualifier_nullable
type_qualifier_nullable:
	single_type_qualifier type_qualifier_nullable
	null
single_type_qualifier:
	storage_qualifier
	layout_qualifier
	precision_qualifier
	interpolation_qualifier
	invariant_qualifier
	precise_qualifier
storage_qualifier:
	CONST
	INOUT
	IN
	OUT
	CENTROID
	PATCH
	SAMPLE
	UNIFORM
	BUFFER
	SHARED
	COHERENT
	VOLATILE
	RESTRICT
	READONLY
	WRITEONLY
	SUBROUTINE subroutine_2
subroutine_2:
	LEFT_PAREN type_name_list RIGHT_PAREN
	null
type_name_list:
	// IDENTIFIER is TYPE_NAME
	IDENTIFIER type_name_list_2
type_name_list_2:
	COMMA IDENTIFIER type_name_list_2
	null
layout_qualifier:
	LAYOUT LEFT_PAREN layout_qualifier_id_list RIGHT_PAREN
layout_qualifier_id_list:
	layout_qualifier_id layout_qualifier_id_list_2
layout_qualifier_id_list_2:
	COMMA layout_qualifier_id layout_qualifier_id_list_2
	null
layout_qualifier_id:
	IDENTIFIER layout_qualifier_id_2
layout_qualifier_id_2:
	EQUAL INTCONSTANT
	null
precision_qualifier:
	HIGH_PRECISION
	MEDIUM_PRECISION
	LOW_PRECISION
interpolation_qualifier:
	SMOOTH
	FLAT
	NOPERSPECTIVE
invariant_qualifier:
	INVARIANT
precise_qualifier:
	PRECISE
////////////////////////////////////////////////////////////////////////////////
