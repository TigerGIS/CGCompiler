<translation_unit> ::=
    <declaration_or_definition> <translation_unit> |
    null ;
<declaration_or_definition> ::=
    "precision" <precision_qualifier> <type_specifier> ";" |
    <type_qualifier> <identifier_for_declaration_or_function_with_type_qualifier> |
    <type_specifier> <identifier_for_declaration_or_function> ;

<identifier_for_declaration_or_function_with_type_qualifier> ::=
    <type_specifier> <identifier_for_declaration_or_function> |
    identifier <variable_or_struct_body> |
	";" ;

<identifier_for_declaration_or_function> ::=
    <init_declarator_list_body> |
    identifier <identifier_for_declaration_or_function_postfix> ;
<identifier_for_declaration_or_function_postfix> ::=
    <init_declarator_list_body> |
    <array_specifier> <identifier_for_declaration_initializer> |
    "=" <initializer> <init_declarator_list_body> |
    "("  <function_parameters>  ")" <function_declaration_or_definition_body> ;
<identifier_for_declaration_initializer> ::=
    <init_declarator_list_body> |
    "=" <initializer> <init_declarator_list_body> ;

<function_declaration_or_definition_body> ::=
    <compound_statement> |
    ";" ;
<compound_statement> ::=
    "{" <statement_list_nullable> "}" ;
<statement_list_nullable> ::=
    <statement_list> |
    null ;
<statement_list> ::=
    <statement> <statement_list_body> ;
<statement_list_body> ::=
    <statement> <statement_list_body> |
    null ;
<statement> ::=
    <compound_statement> |
    <simple_statement> ;
<simple_statement> ::=
    <declaration_statement> |
    <expression_statement> |
    <selection_statement> |
    <switch_statement> |
    <case_label> |
    <iteration_statement> |
    <jump_statement> ;
<declaration_statement> ::=
    "precision" <precision_qualifier> <type_specifier> ";" |
    <type_specifier> <type_specifier_fan_for_declaration_statement> |
    <type_qualifier> <type_qualifier_fan_for_declaration_statement> ;

<type_qualifier_fan_for_declaration_statement> ::=
    <type_specifier> <type_specifier_fan_for_declaration_statement> |
    identifier <identifier_fan_for_type_qualifier_fan_for_declaration_statement> |
    ";" ;
<type_specifier_fan_for_declaration_statement> ::=
    identifier <identifier_fan_for_type_specifier_fan_for_declaration_statement> |
    null ;
<identifier_fan_for_type_specifier_fan_for_declaration_statement> ::=
    <array_specifier> <array_specifier_fan_for_identifier_fan_for_type_specifier_fan_for_declaration_statement> |
    "=" <initializer> |
    "(" <function_parameters> ")" ";" |
    null ;
<array_specifier_fan_for_identifier_fan_for_type_specifier_fan_for_declaration_statement> ::=
    "=" <initializer> |
    null ;
<identifier_fan_for_type_qualifier_fan_for_declaration_statement> ::=
    "{" <struct_declaration_list> "}" <variable_after_struct_definition> |
    <identifier_list> ";" |
    ";" ;

<variable_after_struct_definition> ::=
    identifier <array_specifier_nullable> ";" ;
<array_specifier_nullable> ::=
    <array_specifier> |
    null ;
<expression_statement> ::=
    <expression> ";" |
    ";" ;
<expression> ::=
    <assignment_expression> <expression_nullable> ;
<expression_nullable> ::=
    "," <assignment_expression> <expression_nullable> |
    null ;
<assignment_expression> ::=
    <conditional_expression> | // x + y or x || y or x << y
    <unary_expression> <assignment_operator> <assignment_expression> ;// x = y = z = 1.0f or x = y + z

<conditional_expression> ::=
    <logical_or_expression> <question_selection_expresition> ;
<question_selection_expresition> ::=
    "?" <expression> ":" <assignment_expression> |
    null ;

<unary_expression> ::=
    <postfix_expression> |
    "++" <unary_expression> |
    "--" <unary_expression> |
    <unary_operator> <unary_expression> ;
<assignment_operator> ::=
    "=" |
    "*=" |
    "/=" |
    "%=" |
    "+=" |
    "-=" |
    "<=" |
    ">=" |
    "&=" |
    "^=" |
    "|=" ;
<logical_or_expression> ::=
    <logical_xor_expression> <logical_or_expression_tail> ;
<logical_or_expression_tail> ::=
    "||" <logical_xor_expression> <logical_or_expression_tail> |
    null ;
<logical_xor_expression> ::=
    <logical_and_expression> <logical_xor_expression_tail> ;
<logical_xor_expression_tail> ::=
    "^^" <logical_and_expression> <logical_xor_expression_tail> |
    null ;
<logical_and_expression> ::=
    <inclusive_or_expression> <logical_and_expression_tail> ;
<logical_and_expression_tail> ::=
    "&&" <inclusive_or_expression> <logical_and_expression_tail> |
    null ;
<inclusive_or_expression> ::=
    <exclusive_or_expression> <inclusive_or_expression_tail> ;
<inclusive_or_expression_tail> ::=
    "|" <exclusive_or_expression> <inclusive_or_expression_tail> |
    null ;
<exclusive_or_expression> ::=
    <and_expression> <exclusive_or_expression_tail> ;
<exclusive_or_expression_tail> ::=
    "^" <and_expression> <exclusive_or_expression_tail> |
    null ;
<and_expression> ::=
    <equality_expression> <and_expression_tail> ;
<and_expression_tail> ::=
    "&" <equality_expression> <and_expression_tail> |
    null ;
<equality_expression> ::=
    <relational_expression> <equality_expression_tail> ;
<equality_expression_tail> ::=
    "==" <relational_expression> <equality_expression_tail> |
    "!=" <relational_expression> <equality_expression_tail> |
    null ;
<relational_expression> ::=
    <shift_expression> <relational_expression_tail> ;
<relational_expression_tail> ::=
    "<" <shift_expression> <relational_expression_tail> |
    ">" <shift_expression> <relational_expression_tail> |
    "<=" <shift_expression> <relational_expression_tail> |
    ">=" <shift_expression> <relational_expression_tail> |
    null ;
<shift_expression> ::=
    <additive_expression> <shift_expression_tail> ;
<shift_expression_tail> ::=
    "<<" <additive_expression> <shift_expression_tail> |
    ">>" <additive_expression> <shift_expression_tail> |
    null ;
<additive_expression> ::=
    <multiplicative_expression> <additive_expression_tail> ;
<additive_expression_tail> ::=
    "+" <multiplicative_expression> <additive_expression_tail> |
    "-" <multiplicative_expression> <additive_expression_tail> |
    null ;
<multiplicative_expression> ::=
    <unary_expression> <multiplicative_expression_tail> ;
<multiplicative_expression_tail> ::=
    "*" <unary_expression> <multiplicative_expression_tail> |
    "/" <unary_expression> <multiplicative_expression_tail> |
    "%" <unary_expression> <multiplicative_expression_tail> |
    null ;

<postfix_expression> ::=
    <primary_expression> <postfix_expression_tail> |
    <function_call>  <postfix_expression_tail> ;
<postfix_expression_tail> ::=
    "[" <integer_expression> "]" <postfix_expression_tail> |
    "." <FIELD_SELECTION> <postfix_expression_tail> |
    "++" <postfix_expression_tail> |
    "--" <postfix_expression_tail> |
    null ;
<integer_expression> ::=
    <expression> ;

<unary_operator> ::=
    "+" |
    "-" |
    "!" |
    "~" ;


<function_parameters> ::=
    <parameter_declaration> <function_parameters_body> |
    null ;
<function_parameters_body> ::=
    "," <parameter_declaration> <function_parameters_body> |
    null ;
<parameter_declaration> ::=
    <type_qualifier> <type_specifier_parameter_declaration> |
    <type_specifier_parameter_declaration> ;
<type_specifier_parameter_declaration> ::=
    <type_specifier> <identifier_array_for_parameter_declaration> ;
<identifier_array_for_parameter_declaration> ::=
    identifier <array_specifier_for_parameter_declaration> |
    null ;
<array_specifier_for_parameter_declaration> ::=
    <array_specifier> |
    null ;

<init_declarator_list_body> ::=
    "," identifier <init_declarator_list_body_postfix> <init_declarator_list_body> |
    null ;
<init_declarator_list_body_postfix> ::=
    <array_specifier> <init_delcarator_list_body_postfix_array_initializer> |
    "=" <initializer> |
    null ;
<init_delcarator_list_body_postfix_array_initializer> ::=
    "=" <initializer> |
    null ;

<variable_or_struct_body> ::=
    <variable_body> |
    <struct_body> ;
<variable_body> ::=
    <identifier_list> ";" |

    ";" ;
<struct_body> ::=
    "{" <struct_declaration_list> "}" <variable_after_struct_definition> ;
<variable_after_struct_definition> ::=
    identifier <single_variable_or_array> |
    ";" ;
<single_variable_or_array> ::=
    <array_specifier> ";" |
    ";" ;

<type_specifier> ::=
    <type_specifier_nonarray> <array_specifier_or_null> ;
<array_specifier_or_null> ::=
    <array_specifier> |
    null ;








<primary_expression> ::=
    <variable_identifier> |
    <INTCONSTANT> |
    <UINTCONSTANT> |
    <FLOATCONSTANT> |
    <BOOLCONSTANT> |
    <DOUBLECONSTANT> |
    "(" <expression> ")" ;


<function_call> ::=
    <function_call_or_method> ;
<function_call_or_method> ::=
    <function_call_generic> ;
<function_call_generic> ::=
    <function_call_header_with_parameters> ")" |
    <function_call_header_no_parameters> ")" ;
<function_call_header_no_parameters> ::=
    <function_call_header> "void" |
    <function_call_header> ;
<function_call_header_with_parameters> ::=
    <function_call_header> <assignment_expression> |
    <function_call_header_with_parameters> "," <assignment_expression> ;
<function_call_header> ::=
    <function_identifier> "(" ;
<function_identifier> ::=
    <type_specifier> |
    <postfix_expression> ;

















<constant_expression> ::=
    <conditional_expression> ;

<identifier_list> ::=
    "," identifier <identifier_list_nullable> ;
<identifier_list_nullable> ::=
    "," identifier <identifier_list_nullable> |
    null ;

<invariant_qualifier> ::=
    "invariant" ;
<interpolation_qualifier> ::=
    "smooth" |
    "flat" |
    "noperspective" ;
<layout_qualifier> ::=
    "layout" "(" <layout_qualifier_id_list> ")" ;
<layout_qualifier_id_list> ::=
    <layout_qualifier_id> |
    <layout_qualifier_id_list> "," <layout_qualifier_id> ;
<layout_qualifier_id> ::=
    identifier |
    identifier "=" <INTCONSTANT> ;
<precise_qualifier> ::=
    "precise" ;
<type_qualifier> ::=
    <single_type_qualifier> |
    <type_qualifier> <single_type_qualifier> ;
<single_type_qualifier> ::=
    <storage_qualifier> |
    <layout_qualifier> |
    <precision_qualifier> |
    <interpolation_qualifier> |
    <invariant_qualifier> |
    <precise_qualifier> ;
<storage_qualifier> ::=
    "const" |
    "inout" |
    "in" |
    "out" |
    "centroid" |
    "patch" |
    "sample" |
    "uniform" |
    "buffer" |
    "shared" |
    "coherent" |
    "volatile" |
    "restrict" |
    "readonly" |
    "writeonly" |
    "subroutine" |
    "subroutine" "(" <type_name_list> ")" ;
<type_name_list> ::=
    <TYPE_NAME> |
    <type_name_list> "," <TYPE_NAME> ;

<array_specifier> ::=
    "[" "]" |
    "[" <constant_expression> "]" |
    <array_specifier> "[" "]" |
    <array_specifier> "[" <constant_expression> "]" ;
<type_specifier_nonarray> ::=
    "void" |
    "float" |
    "double" |
    "int" |
    "uint" |
    "bool" |
    "vec2" |
    "vec3" |
    "vec4" |
    "dvec2" |
    "dvec3" |
    "dvec4" |
    "bvec2" |
    "bvec3" |
    "bvec4" |
    "ivec2" |
    "ivec3" |
    "ivec4" |
    "uvec2" |
    "uvec3" |
    "uvec4" |
    "mat2" |
    "mat3" |
    "mat4" |
    "mat2x2" |
    "mat2x3" |
    "mat2x4" |
    "mat3x2" |
    "mat3x3" |
    "mat3x4" |
    "mat4x2" |
    "mat4x3" |
    "mat4x4" |
    "dmat2" |
    "dmat3" |
    "dmat4" |
    "dmat2x2" |
    "dmat2x3" |
    "dmat2x4" |
    "dmat3x2" |
    "dmat3x3" |
    "dmat3x4" |
    "dmat4x2" |
    "dmat4x3" |
    "dmat4x4" |
    "atomic_uint" |
    "sampler1D" |
    "sampler2D" |
    "sampler3D" |
    "samplerCube" |
    "sampler1DShadow" |
    "sampler2DShadow" |
    "samplerCubeShadow" |
    "sampler1DArray" |
    "sampler2DArray" |
    "sampler1DArrayShadow" |
    "sampler2DArrayShadow" |
    "samplerCubeArray" |
    "samplerCubeArrayShadow" |
    "isampler1D" |
    "isampler2D" |
    "isampler3D" |
    "isamplerCube" |
    "isampler1DArray" |
    "isampler2DArray" |
    "isamplerCubeArray" |
    "usampler1D" |
    "usampler2D" |
    "usampler3D" |
    "usamplerCube" |
    "usampler1DArray" |
    "usampler2DArray" |
    "usamplerCubeArray" |
    "sampler2DRect" |
    "sampler2DRectShadow" |
    "isampler2DRect" |
    "usampler2DRect" |
    "samplerBuffer" |
    "isamplerBuffer" |
    "usamplerBuffer" |
    "sampler2DMS" |
    "isampler2DMS" |
    "usampler2DMS" |
    "sampler2DMSArray" |
    "isampler2DMSArray" |
    "usampler2DMSArray" |
    "image1D" |
    "iimage1D" |
    "uimage1D" |
    "image2D" |
    "iimage2D" |
    "uimage2D" |
    "image3D" |
    "iimage3D" |
    "uimage3D" |
    "image2DRect" |
    "iimage2DRect" |
    "uimage2DRect" |
    "imageCube" |
    "iimageCube" |
    "uimageCube" |
    "imageBuffer" |
    "iimageBuffer" |
    "uimageBuffer" |
    "image1DArray" |
    "iimage1DArray" |
    "uimage1DArray" |
    "image2DArray" |
    "iimage2DArray" |
    "uimage2DArray" |
    "imageCubeArray" |
    "iimageCubeArray" |
    "uimageCubeArray" |
    "image2DMS" |
    "iimage2DMS" |
    "uimage2DMS" |
    "image2DMSArray" |
    "iimage2DMSArray" |
    "uimage2DMSArray" |
    <struct_specifier> |
    <TYPE_NAME> ;
<precision_qualifier> ::=
    "highp" |
    "mediump" |
    "lowp" ;
<struct_specifier> ::=
    "struct" identifier "{" <struct_declaration_list> "}" |
    "struct" "{" <struct_declaration_list> "}" ;
<struct_declaration_list> ::=
    <struct_declaration> |
    <struct_declaration_list> <struct_declaration> ;
<struct_declaration> ::=
    <type_specifier> <struct_declarator_list> ";" |
    <type_qualifier> <type_specifier> <struct_declarator_list> ";" ;
<struct_declarator_list> ::=
    <struct_declarator> |
    <struct_declarator_list> "," <struct_declarator> ;
<struct_declarator> ::=
    identifier |
    identifier <array_specifier> ;
<initializer> ::=
    <assignment_expression> |
    "{" <initializer_list> "}" |
    "{" <initializer_list> "," "}" ;
<initializer_list> ::=
    <initializer> |
    <initializer_list> "," <initializer> ;















<selection_statement> ::=
    "if" "(" <expression> ")" <selection_rest_statement> ;
<selection_rest_statement> ::=
    <statement> "else" <statement> |
    <statement> ;
<condition> ::=
    <expression> |
    <type_specifier> identifier "=" <initializer> |
    <type_qualifier> <type_specifier> identifier "=" <initializer> ;
<switch_statement> ::=
    "switch" "(" <expression> ")" "{" <switch_statement_list> "}" ;
<switch_statement_list> ::=
    <statement_list> ;
<case_label> ::=
    "case" <expression> ":" |
    "default" ":" ;
<iteration_statement> ::=
    "while" "(" <condition> ")" <statement> |
    "do" <statement> "while" "(" <expression> ")" ";" |
    "for" "(" <for_init_statement> <for_rest_statement> ")" <statement> ;
<for_init_statement> ::=
    <expression_statement> |
    <declaration_statement> ;
<conditionopt> ::=
    <condition> ;
<for_rest_statement> ::=
    <conditionopt> ";" |
    <conditionopt> ";" <expression> ;
<jump_statement> ::=
    "continue" ";" |
    "break" ";" |
    "return" ";" |
    "return" <expression> ";" |
    "discard" ";" ;
<variable_identifier> ::=
    identifier ;