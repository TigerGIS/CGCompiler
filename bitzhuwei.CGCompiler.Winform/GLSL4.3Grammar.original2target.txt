variable_identifier:
	IDENTIFIER







// Grammar Note: No traditional style type casts.

// Grammar Note: No '*' or '&' unary ops. Pointers are not supported.
















declaration:
	function_prototype SEMICOLON
	init_declarator_list SEMICOLON
	PRECISION precision_qualifier type_specifier SEMICOLON
	type_qualifier IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE SEMICOLON
	type_qualifier IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE IDENTIFIER SEMICOLON
	type_qualifier IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE IDENTIFIER array_specifier SEMICOLON
	type_qualifier SEMICOLON
	type_qualifier IDENTIFIER SEMICOLON
	type_qualifier IDENTIFIER identifier_list SEMICOLON
identifier_list:
	COMMA IDENTIFIER
	identifier_list COMMA IDENTIFIER
function_prototype:
	function_declarator RIGHT_PAREN
function_declarator:
	function_header
	function_header_with_parameters
function_header_with_parameters:
	function_header parameter_declaration
	function_header_with_parameters COMMA parameter_declaration
function_header:
	fully_specified_type IDENTIFIER LEFT_PAREN
parameter_declarator:
	type_specifier IDENTIFIER
	type_specifier IDENTIFIER array_specifier
parameter_declaration:
	type_qualifier parameter_declarator
	parameter_declarator
	type_qualifier parameter_type_specifier
	parameter_type_specifier
parameter_type_specifier:
	type_specifier
init_declarator_list:
	single_declaration
	init_declarator_list COMMA IDENTIFIER
	init_declarator_list COMMA IDENTIFIER array_specifier
	init_declarator_list COMMA IDENTIFIER array_specifier EQUAL initializer
	init_declarator_list COMMA IDENTIFIER EQUAL initializer
single_declaration:
	fully_specified_type
	fully_specified_type IDENTIFIER
	fully_specified_type IDENTIFIER array_specifier
	fully_specified_type IDENTIFIER array_specifier EQUAL initializer
	fully_specified_type IDENTIFIER EQUAL initializer
// Grammar Note: No 'enum', or 'typedef'.











initializer:
	assignment_expression
	LEFT_BRACE initializer_list RIGHT_BRACE
	LEFT_BRACE initializer_list COMMA RIGHT_BRACE
initializer_list:
	initializer
	initializer_list COMMA initializer
	declaration_statement:
	declaration



expression_statement:
	SEMICOLON
	expression SEMICOLON
selection_statement:
	IF LEFT_PAREN expression RIGHT_PAREN selection_rest_statement
selection_rest_statement:
	statement ELSE statement
	statement

switch_statement:
	SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE switch_statement_list RIGHT_BRACE
switch_statement_list:
	// /* nothing */
	statement_list
case_label:
	CASE expression COLON
	DEFAULT COLON



	/* empty */


// Grammar Note: No 'goto'. Gotos are not supported.
translation_unit:
	external_declaration
	translation_unit external_declaration
external_declaration:
	function_definition
	declaration

function_definition:
	function_prototype compound_statement_no_new_scope
