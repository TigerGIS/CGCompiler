FIRST(<external_declaration> <translation_unit_nullable>)={ "precision", "void", identifier, "struct", "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(null)={ null }
FIRST("precision" <precision_qualifier> <type_specifier> ";")={ "precision" }
FIRST(<type_specifier> <external_declaration_1>)={ "void", identifier, "struct" }
FIRST(<type_qualifier> <external_declaration_2>)={ "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST("void" <array_specifier_nullable> <external_declaration_2_1>)={ "void" }
FIRST(<struct_specifier> <array_specifier_nullable> <external_declaration_2_2>)={ "struct" }
FIRST(identifier <external_declaration_2_3>)={ identifier }
FIRST(";")={ ";" }
FIRST(identifier <external_declaration_2_3_1>)={ identifier }
FIRST("[" <constant_expression_or_null> "]" <array_specifier_nullable> <external_declaration_2_3_1_1>)={ "[" }
FIRST(identifier <external_declaration_2_3_1_2>)={ identifier }
FIRST(<init_declarator_list_2> <semicolon_or_null>)={ null, ",", ";" }
FIRST("{" <struct_declaration_list> "}" <variable_name_or_null> ";")={ "{" }
FIRST("(" <function_parameters_or_null> ")" <compound_statement_no_new_scope_or_semicolon>)={ "(" }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(identifier <external_declaration_2_3_1_1_1>)={ identifier }
FIRST(<init_declarator_list_2>)={ null, "," }
FIRST("(" <function_parameters_or_null> ")" <compound_statement_no_new_scope_or_semicolon>)={ "(" }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(identifier <external_declaration_2_2_1>)={ identifier }
FIRST(<init_declarator_list_2>)={ null, "," }
FIRST("(" <function_parameters_or_null> ")" <compound_statement_no_new_scope_or_semicolon>)={ "(" }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(identifier <external_declaration_2_1_1>)={ identifier }
FIRST(<init_declarator_list_2>)={ null, "," }
FIRST("(" <function_parameters_or_null> ")" <compound_statement_no_new_scope_or_semicolon>)={ "(" }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(<init_declarator_list_2>)={ null, "," }
FIRST(identifier <external_declaration_1_1>)={ identifier }
FIRST("(" <function_parameters_or_null> ")" <compound_statement_no_new_scope_or_semicolon>)={ "(" }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(<compound_statement_no_new_scope>)={ "{" }
FIRST(";")={ ";" }
FIRST(identifier <declaration_or_expression_statement_1>)={ identifier }
FIRST(identifier <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ identifier }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(<compound_statement>)={ "{" }
FIRST(<simple_statement>)={ identifier, "if", "switch", "case", "default", "while", "do", "for", "continue", "break", "return", "discard" }
FIRST(<declaration_or_expression_statement>)={ identifier }
FIRST(<selection_statement>)={ "if" }
FIRST(<switch_statement>)={ "switch" }
FIRST(<case_label>)={ "case", "default" }
FIRST(<iteration_statement>)={ "while", "do", "for" }
FIRST(<jump_statement>)={ "continue", "break", "return", "discard" }
FIRST("if" "(" <expression> ")" <selection_rest_statement>)={ "if" }
FIRST(<statement> <selection_rest_statement_2>)={ "{", identifier, "if", "switch", "case", "default", "while", "do", "for", "continue", "break", "return", "discard" }
FIRST("else" <statement>)={ "else" }
FIRST(null)={ null }
FIRST("switch" "(" <expression> ")" "{" <switch_statement_list> "}")={ "switch" }
FIRST(<statement_list_nullable>)={ null, "{", identifier, "if", "switch", "case", "default", "while", "do", "for", "continue", "break", "return", "discard" }
FIRST("case" <expression> ":")={ "case" }
FIRST("default" ":")={ "default" }
FIRST("while" "(" <condition> ")" <statement_no_new_scope>)={ "while" }
FIRST("do" <statement> "while" "(" <expression> ")" ";")={ "do" }
FIRST("for" "(" <for_init_statement> <for_rest_statement> ")" <statement_no_new_scope>)={ "for" }
FIRST(<declaration_or_expression_statement>)={ identifier }
FIRST(";")={ ";" }
FIRST(<expression> ";")={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST(<declaration>)={ "precision", "void", identifier, "struct", "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST("precision" <precision_qualifier> <type_specifier> ";")={ "precision" }
FIRST(<type_specifier> <declaration_2>)={ "void", identifier, "struct" }
FIRST(<type_qualifier> <declaration_3>)={ "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST("void" <array_specifier_nullable> <declaration_3_1>)={ "void" }
FIRST(<struct_specifier> <array_specifier_nullable> <declaration_3_2>)={ "struct" }
FIRST(";")={ ";" }
FIRST(identifier <declaration_3_3>)={ identifier }
FIRST(<init_declarator_list_2> <semicolon_or_null>)={ null, ",", ";" }
FIRST("[" <constant_expression_or_null> "]" <array_specifier_nullable> <declaration_3_3_1>)={ "[" }
FIRST(identifier <declaration_3_3_2>)={ identifier }
FIRST("{" <struct_declaration_list> "}" <variable_name_or_null> ";")={ "{" }
FIRST(";")={ ";" }
FIRST(null)={ null }
FIRST("(" <function_parameters_or_null> ")" ";")={ "(" }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(identifier <declaration_3_3_1_1>)={ identifier }
FIRST(<init_declarator_list_2>)={ null, "," }
FIRST("(" <function_parameters_or_null> ")" ";")={ "(" }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(identifier <declaration_3_2_1>)={ identifier }
FIRST(<init_declarator_list_2>)={ null, "," }
FIRST("(" <function_parameters_or_null> ")" ";")={ "(" }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(identifier <declaration_3_1_1>)={ identifier }
FIRST(<init_declarator_list_2>)={ null, "," }
FIRST("(" <function_parameters_or_null> ")" ";")={ "(" }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(<init_declarator_list_2>)={ null, "," }
FIRST(identifier <declaration_2_1>)={ identifier }
FIRST("(" <function_parameters_or_null> ")" ";")={ "(" }
FIRST(<array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ null, "[", "=", "," }
FIRST(<type_specifier> identifier "(" <function_parameters_or_null> ")")={ "void", identifier, "struct" }
FIRST(<type_qualifier> <type_specifier> identifier "(" <function_parameters_or_null> ")")={ "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(<function_header> <function_parameters_or_null>)={ "void", identifier, "struct", "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(<parameter_declaration> <function_header_with_parameters_2>)={ "void", identifier, "struct", "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(null)={ null }
FIRST(<function_header> <parameter_declaration> <function_header_with_parameters_2>)={ "void", identifier, "struct", "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST("," <parameter_declaration> <function_header_with_parameters_2>)={ "," }
FIRST(null)={ null }
FIRST(<fully_specified_type> identifier "(")={ "void", identifier, "struct", "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(<type_specifier> <variable_name_or_null>)={ "void", identifier, "struct" }
FIRST(<type_qualifier> <type_specifier> <variable_name_or_null>)={ "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(<type_specifier> identifier <array_specifier_nullable>)={ "void", identifier, "struct" }
FIRST(<type_specifier>)={ "void", identifier, "struct" }
FIRST(<single_declaration> <init_declarator_list_2>)={ "void", identifier, "struct", "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST("," identifier <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>)={ "," }
FIRST(null)={ null }
FIRST("=" <initializer>)={ "=" }
FIRST(null)={ null }
FIRST(<assignment_expression>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("{" <initializer_list> <comma_or_null> "}")={ "{" }
FIRST(<initializer> <initializer_list_2>)={ "{", "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("," <initializer> <initializer_list_2>)={ "," }
FIRST(null)={ null }
FIRST(",")={ "," }
FIRST(null)={ null }
FIRST(<fully_specified_type> <variable_initializer_nullable>)={ "void", identifier, "struct", "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(identifier <array_specifier_nullable> <equal_initializer_nullable>)={ identifier }
FIRST(null)={ null }
FIRST(<identifier_list>)={ identifier }
FIRST(null)={ null }
FIRST(identifier <identifier_list_2>)={ identifier }
FIRST("," identifier <identifier_list_2>)={ "," }
FIRST(null)={ null }
FIRST(identifier <array_specifier_nullable>)={ identifier }
FIRST(null)={ null }
FIRST(<conditionopt> ";" <expression_or_null>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST(<condition>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST(<expression>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST(<compound_statement_no_new_scope>)={ "{" }
FIRST(<simple_statement>)={ identifier, "if", "switch", "case", "default", "while", "do", "for", "continue", "break", "return", "discard" }
FIRST("{" <statement_list_nullable> "}")={ "{" }
FIRST("continue" ";")={ "continue" }
FIRST("break" ";")={ "break" }
FIRST("return" <expression_or_null> ";")={ "return" }
FIRST("discard" ";")={ "discard" }
FIRST(<expression>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST(null)={ null }
FIRST("{" <statement_list_nullable> "}")={ "{" }
FIRST(<statement> <statement_list_nullable>)={ "{", identifier, "if", "switch", "case", "default", "while", "do", "for", "continue", "break", "return", "discard" }
FIRST(<statement> <statement_list_nullable>)={ "{", identifier, "if", "switch", "case", "default", "while", "do", "for", "continue", "break", "return", "discard" }
FIRST(null)={ null }
FIRST(<assignment_expression> <expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("," <assignment_expression> <expression_2>)={ "," }
FIRST(null)={ null }
FIRST(<unary_expression> <assignment_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST(<postfix_expression>)={ identifier, "(", number, "true", "false" }
FIRST("++" <unary_expression>)={ "++" }
FIRST("--" <unary_expression>)={ "--" }
FIRST(<unary_operator> <unary_expression>)={ "+", "-", "!", "~" }
FIRST(identifier <postfix_expression_3>)={ identifier }
FIRST(<constant_primary_expression> <postfix_expression_2>)={ number, "true", "false" }
FIRST("(" <expression> ")" <postfix_expression_2>)={ "(" }
FIRST("[" <integer_expression> "]" <postfix_expression_3_1>)={ "[" }
FIRST("." <FIELD_SELECTION> <postfix_expression_2>)={ "." }
FIRST("++" <postfix_expression_2>)={ "++" }
FIRST("--" <postfix_expression_2>)={ "--" }
FIRST(null)={ null }
FIRST("(" <expression_or_void_or_null> ")" <postfix_expression_2>)={ "(" }
FIRST(<postfix_expression_2>)={ null, "[", ".", "++", "--" }
FIRST("(" <expression_or_void_or_null> ")" <postfix_expression_2>)={ "(" }
FIRST("[" <integer_expression> "]" <postfix_expression_2>)={ "[" }
FIRST("." <FIELD_SELECTION> <postfix_expression_2>)={ "." }
FIRST("++" <postfix_expression_2>)={ "++" }
FIRST("--" <postfix_expression_2>)={ "--" }
FIRST(null)={ null }
FIRST(identifier)={ identifier }
FIRST(identifier)={ identifier }
FIRST(<constant_primary_expression>)={ number, "true", "false" }
FIRST("(" <expression> ")")={ "(" }
FIRST(number)={ number }
FIRST(<bool_constant>)={ "true", "false" }
FIRST("true")={ "true" }
FIRST("false")={ "false" }
FIRST("+")={ "+" }
FIRST("-")={ "-" }
FIRST("!")={ "!" }
FIRST("~")={ "~" }
FIRST(<expression>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("void")={ "void" }
FIRST(null)={ null }
FIRST("[" <integer_expression> "]")={ "[" }
FIRST(null)={ null }
FIRST(<expression>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST(<multiplicative_expression_2> <additive_expression_2> <shift_expression_2> <relational_expression_2> <equality_expression_2> <and_expression_2> <exclusive_or_expression_2> <inclusive_or_expression_2> <logical_and_expression_2> <logical_xor_expression_2> <logical_or_expression_2> <conditional_expression_2>)={ null, "*", "/", "%", "+", "-", "<<", ">>", "<", ">", "<=", ">=", "==", "!=", "&", "^", "|", "&&", "^^", "||", "?" }
FIRST(<assignment_operator> <assignment_expression>)={ "=", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "^=", "|=" }
FIRST("=")={ "=" }
FIRST("*=")={ "*=" }
FIRST("/=")={ "/=" }
FIRST("%=")={ "%=" }
FIRST("+=")={ "+=" }
FIRST("-=")={ "-=" }
FIRST("<<=")={ "<<=" }
FIRST(">>=")={ ">>=" }
FIRST("&=")={ "&=" }
FIRST("^=")={ "^=" }
FIRST("|=")={ "|=" }
FIRST(<logical_or_expression> <conditional_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("?" <expression> ":" <assignment_expression>)={ "?" }
FIRST(null)={ null }
FIRST(<logical_xor_expression> <logical_or_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("||" <logical_xor_expression> <logical_or_expression_2>)={ "||" }
FIRST(null)={ null }
FIRST(<logical_and_expression> <logical_xor_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("^^" <logical_and_expression> <logical_xor_expression_2>)={ "^^" }
FIRST(null)={ null }
FIRST(<inclusive_or_expression> <logical_and_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("&&" <inclusive_or_expression> <logical_and_expression_2>)={ "&&" }
FIRST(null)={ null }
FIRST(<exclusive_or_expression> <inclusive_or_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("|" <exclusive_or_expression> <inclusive_or_expression_2>)={ "|" }
FIRST(null)={ null }
FIRST(<and_expression> <exclusive_or_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("^" <and_expression> <exclusive_or_expression_2>)={ "^" }
FIRST(null)={ null }
FIRST(<equality_expression> <and_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("&" <equality_expression> <and_expression_2>)={ "&" }
FIRST(null)={ null }
FIRST(<relational_expression> <equality_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("==" <relational_expression> <equality_expression_2>)={ "==" }
FIRST("!=" <relational_expression> <equality_expression_2>)={ "!=" }
FIRST(null)={ null }
FIRST(<shift_expression> <relational_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("<" <shift_expression> <relational_expression_2>)={ "<" }
FIRST(">" <shift_expression> <relational_expression_2>)={ ">" }
FIRST("<=" <shift_expression> <relational_expression_2>)={ "<=" }
FIRST(">=" <shift_expression> <relational_expression_2>)={ ">=" }
FIRST(null)={ null }
FIRST(<additive_expression> <shift_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("<<" <additive_expression> <shift_expression_2>)={ "<<" }
FIRST(">>" <additive_expression> <shift_expression_2>)={ ">>" }
FIRST(null)={ null }
FIRST(<multiplicative_expression> <additive_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("+" <multiplicative_expression> <additive_expression_2>)={ "+" }
FIRST("-" <multiplicative_expression> <additive_expression_2>)={ "-" }
FIRST(null)={ null }
FIRST(<unary_expression> <multiplicative_expression_2>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("*" <unary_expression> <multiplicative_expression_2>)={ "*" }
FIRST("/" <unary_expression> <multiplicative_expression_2>)={ "/" }
FIRST("%" <unary_expression> <multiplicative_expression_2>)={ "%" }
FIRST(null)={ null }
FIRST(<type_specifier>)={ "void", identifier, "struct" }
FIRST(<type_qualifier> <type_specifier>)={ "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(<type_specifier_nonarray> <array_specifier_nullable>)={ "void", identifier, "struct" }
FIRST("[" <constant_expression_or_null> "]" <array_specifier_nullable>)={ "[" }
FIRST("[" <constant_expression_or_null> "]" <array_specifier_nullable>)={ "[" }
FIRST(null)={ null }
FIRST(<conditional_expression>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST(null)={ null }
FIRST(<conditional_expression>)={ "++", "--", identifier, "(", "+", "-", "!", "~", number, "true", "false" }
FIRST("void")={ "void" }
FIRST(<struct_specifier>)={ "struct" }
FIRST(identifier)={ identifier }
FIRST("float")={ "float" }
FIRST("double")={ "double" }
FIRST("int")={ "int" }
FIRST("uint")={ "uint" }
FIRST("bool")={ "bool" }
FIRST("vec2")={ "vec2" }
FIRST("vec3")={ "vec3" }
FIRST("vec4")={ "vec4" }
FIRST("dvec2")={ "dvec2" }
FIRST("dvec3")={ "dvec3" }
FIRST("dvec4")={ "dvec4" }
FIRST("bvec2")={ "bvec2" }
FIRST("bvec3")={ "bvec3" }
FIRST("bvec4")={ "bvec4" }
FIRST("ivec2")={ "ivec2" }
FIRST("ivec3")={ "ivec3" }
FIRST("ivec4")={ "ivec4" }
FIRST("uvec2")={ "uvec2" }
FIRST("uvec3")={ "uvec3" }
FIRST("uvec4")={ "uvec4" }
FIRST("mat2")={ "mat2" }
FIRST("mat3")={ "mat3" }
FIRST("mat4")={ "mat4" }
FIRST("mat2x2")={ "mat2x2" }
FIRST("mat2x3")={ "mat2x3" }
FIRST("mat2x4")={ "mat2x4" }
FIRST("mat3x2")={ "mat3x2" }
FIRST("mat3x3")={ "mat3x3" }
FIRST("mat3x4")={ "mat3x4" }
FIRST("mat4x2")={ "mat4x2" }
FIRST("mat4x3")={ "mat4x3" }
FIRST("mat4x4")={ "mat4x4" }
FIRST("dmat2")={ "dmat2" }
FIRST("dmat3")={ "dmat3" }
FIRST("dmat4")={ "dmat4" }
FIRST("dmat2x2")={ "dmat2x2" }
FIRST("dmat2x3")={ "dmat2x3" }
FIRST("dmat2x4")={ "dmat2x4" }
FIRST("dmat3x2")={ "dmat3x2" }
FIRST("dmat3x3")={ "dmat3x3" }
FIRST("dmat3x4")={ "dmat3x4" }
FIRST("dmat4x2")={ "dmat4x2" }
FIRST("dmat4x3")={ "dmat4x3" }
FIRST("dmat4x4")={ "dmat4x4" }
FIRST("atomic_uint")={ "atomic_uint" }
FIRST("sampler1D")={ "sampler1D" }
FIRST("sampler2D")={ "sampler2D" }
FIRST("sampler3D")={ "sampler3D" }
FIRST("samplerCube")={ "samplerCube" }
FIRST("sampler1DShadow")={ "sampler1DShadow" }
FIRST("sampler2DShadow")={ "sampler2DShadow" }
FIRST("samplerCubeShadow")={ "samplerCubeShadow" }
FIRST("sampler1DArray")={ "sampler1DArray" }
FIRST("sampler2DArray")={ "sampler2DArray" }
FIRST("sampler1DArrayShadow")={ "sampler1DArrayShadow" }
FIRST("sampler2DArrayShadow")={ "sampler2DArrayShadow" }
FIRST("samplerCubeArray")={ "samplerCubeArray" }
FIRST("samplerCubeArrayShadow")={ "samplerCubeArrayShadow" }
FIRST("isampler1D")={ "isampler1D" }
FIRST("isampler2D")={ "isampler2D" }
FIRST("isampler3D")={ "isampler3D" }
FIRST("isamplerCube")={ "isamplerCube" }
FIRST("isampler1DArray")={ "isampler1DArray" }
FIRST("isampler2DArray")={ "isampler2DArray" }
FIRST("isamplerCubeArray")={ "isamplerCubeArray" }
FIRST("usampler1D")={ "usampler1D" }
FIRST("usampler2D")={ "usampler2D" }
FIRST("usampler3D")={ "usampler3D" }
FIRST("usamplerCube")={ "usamplerCube" }
FIRST("usampler1DArray")={ "usampler1DArray" }
FIRST("usampler2DArray")={ "usampler2DArray" }
FIRST("usamplerCubeArray")={ "usamplerCubeArray" }
FIRST("sampler2DRect")={ "sampler2DRect" }
FIRST("sampler2DRectShadow")={ "sampler2DRectShadow" }
FIRST("isampler2DRect")={ "isampler2DRect" }
FIRST("usampler2DRect")={ "usampler2DRect" }
FIRST("samplerBuffer")={ "samplerBuffer" }
FIRST("isamplerBuffer")={ "isamplerBuffer" }
FIRST("usamplerBuffer")={ "usamplerBuffer" }
FIRST("sampler2DMS")={ "sampler2DMS" }
FIRST("isampler2DMS")={ "isampler2DMS" }
FIRST("usampler2DMS")={ "usampler2DMS" }
FIRST("sampler2DMSArray")={ "sampler2DMSArray" }
FIRST("isampler2DMSArray")={ "isampler2DMSArray" }
FIRST("usampler2DMSArray")={ "usampler2DMSArray" }
FIRST("image1D")={ "image1D" }
FIRST("iimage1D")={ "iimage1D" }
FIRST("uimage1D")={ "uimage1D" }
FIRST("image2D")={ "image2D" }
FIRST("iimage2D")={ "iimage2D" }
FIRST("uimage2D")={ "uimage2D" }
FIRST("image3D")={ "image3D" }
FIRST("iimage3D")={ "iimage3D" }
FIRST("uimage3D")={ "uimage3D" }
FIRST("image2DRect")={ "image2DRect" }
FIRST("iimage2DRect")={ "iimage2DRect" }
FIRST("uimage2DRect")={ "uimage2DRect" }
FIRST("imageCube")={ "imageCube" }
FIRST("iimageCube")={ "iimageCube" }
FIRST("uimageCube")={ "uimageCube" }
FIRST("imageBuffer")={ "imageBuffer" }
FIRST("iimageBuffer")={ "iimageBuffer" }
FIRST("uimageBuffer")={ "uimageBuffer" }
FIRST("image1DArray")={ "image1DArray" }
FIRST("iimage1DArray")={ "iimage1DArray" }
FIRST("uimage1DArray")={ "uimage1DArray" }
FIRST("image2DArray")={ "image2DArray" }
FIRST("iimage2DArray")={ "iimage2DArray" }
FIRST("uimage2DArray")={ "uimage2DArray" }
FIRST("imageCubeArray")={ "imageCubeArray" }
FIRST("iimageCubeArray")={ "iimageCubeArray" }
FIRST("uimageCubeArray")={ "uimageCubeArray" }
FIRST("image2DMS")={ "image2DMS" }
FIRST("iimage2DMS")={ "iimage2DMS" }
FIRST("uimage2DMS")={ "uimage2DMS" }
FIRST("image2DMSArray")={ "image2DMSArray" }
FIRST("iimage2DMSArray")={ "iimage2DMSArray" }
FIRST("uimage2DMSArray")={ "uimage2DMSArray" }
FIRST("struct" <identifier_or_null> "{" <struct_declaration_list> "}")={ "struct" }
FIRST(identifier)={ identifier }
FIRST(null)={ null }
FIRST(<struct_declaration> <struct_declaration_list_nullable>)={ "void", identifier, "struct", "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(<struct_declaration> <struct_declaration_list_nullable>)={ "void", identifier, "struct", "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(null)={ null }
FIRST(<type_specifier> <struct_declarator_list> ";")={ "void", identifier, "struct" }
FIRST(<type_qualifier> <type_specifier> <struct_declarator_list> ";")={ "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(<struct_declarator> <struct_declarator_list_2>)={ identifier }
FIRST("," <struct_declarator> <struct_declarator_list_2>)={ "," }
FIRST(null)={ null }
FIRST(identifier <array_specifier_nullable>)={ identifier }
FIRST(<single_type_qualifier> <type_qualifier_nullable>)={ "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(<single_type_qualifier> <type_qualifier_nullable>)={ "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine", "layout", "high_precision", "medium_precision", "low_precision", "smooth", "flat", "noperspective", "invariant", "precise" }
FIRST(null)={ null }
FIRST(<storage_qualifier>)={ "const", "inout", "in", "out", "centroid", "patch", "sample", "uniform", "buffer", "shared", "coherent", "volatile", "restrict", "readonly", "writeonly", "subroutine" }
FIRST(<layout_qualifier>)={ "layout" }
FIRST(<precision_qualifier>)={ "high_precision", "medium_precision", "low_precision" }
FIRST(<interpolation_qualifier>)={ "smooth", "flat", "noperspective" }
FIRST(<invariant_qualifier>)={ "invariant" }
FIRST(<precise_qualifier>)={ "precise" }
FIRST("const")={ "const" }
FIRST("inout")={ "inout" }
FIRST("in")={ "in" }
FIRST("out")={ "out" }
FIRST("centroid")={ "centroid" }
FIRST("patch")={ "patch" }
FIRST("sample")={ "sample" }
FIRST("uniform")={ "uniform" }
FIRST("buffer")={ "buffer" }
FIRST("shared")={ "shared" }
FIRST("coherent")={ "coherent" }
FIRST("volatile")={ "volatile" }
FIRST("restrict")={ "restrict" }
FIRST("readonly")={ "readonly" }
FIRST("writeonly")={ "writeonly" }
FIRST("subroutine" <subroutine_2>)={ "subroutine" }
FIRST("(" <type_name_list> ")")={ "(" }
FIRST(null)={ null }
FIRST(identifier <type_name_list_2>)={ identifier }
FIRST("," identifier <type_name_list_2>)={ "," }
FIRST(null)={ null }
FIRST("layout" "(" <layout_qualifier_id_list> ")")={ "layout" }
FIRST(<layout_qualifier_id> <layout_qualifier_id_list_2>)={ identifier }
FIRST("," <layout_qualifier_id> <layout_qualifier_id_list_2>)={ "," }
FIRST(null)={ null }
FIRST(identifier <layout_qualifier_id_2>)={ identifier }
FIRST("=" number)={ "=" }
FIRST(null)={ null }
FIRST("high_precision")={ "high_precision" }
FIRST("medium_precision")={ "medium_precision" }
FIRST("low_precision")={ "low_precision" }
FIRST("smooth")={ "smooth" }
FIRST("flat")={ "flat" }
FIRST("noperspective")={ "noperspective" }
FIRST("invariant")={ "invariant" }
FIRST("precise")={ "precise" }
