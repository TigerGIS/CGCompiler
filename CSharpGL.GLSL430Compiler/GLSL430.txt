Name:GLSL430
<translation_unit_nullable> ::= <external_declaration> <translation_unit_nullable> | null;
<external_declaration> ::= "precision" <precision_qualifier> <type_specifier> ";" | <type_specifier> <external_declaration_1> | <type_qualifier> <external_declaration_2>;
<external_declaration_2> ::= "void" <array_specifier_nullable> <external_declaration_2_1> | <struct_specifier> <array_specifier_nullable> <external_declaration_2_2> | identifier <external_declaration_2_3> | ";";
<external_declaration_2_3> ::= identifier <external_declaration_2_3_1>;
<external_declaration_2_3_1> ::= "[" <constant_expression_or_null> "]" <array_specifier_nullable> <external_declaration_2_3_1_1> | identifier <external_declaration_2_3_1_2> | <init_declarator_list_2> <semicolon_or_null> | "{" <struct_declaration_list> "}" <variable_name_or_null> ";";
<external_declaration_2_3_1_2> ::= "(" <function_parameters_or_null> ")" <compound_statement_no_new_scope_or_semicolon> | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<external_declaration_2_3_1_1> ::= identifier <external_declaration_2_3_1_1_1> | <init_declarator_list_2>;
<external_declaration_2_3_1_1_1> ::= "(" <function_parameters_or_null> ")" <compound_statement_no_new_scope_or_semicolon> | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<external_declaration_2_2> ::= identifier <external_declaration_2_2_1> | <init_declarator_list_2>;
<external_declaration_2_2_1> ::= "(" <function_parameters_or_null> ")" <compound_statement_no_new_scope_or_semicolon> | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<external_declaration_2_1> ::= identifier <external_declaration_2_1_1> | <init_declarator_list_2>;
<external_declaration_2_1_1> ::= "(" <function_parameters_or_null> ")" <compound_statement_no_new_scope_or_semicolon> | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<external_declaration_1> ::= <init_declarator_list_2> | identifier <external_declaration_1_1>;
<external_declaration_1_1> ::= "(" <function_parameters_or_null> ")" <compound_statement_no_new_scope_or_semicolon> | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<compound_statement_no_new_scope_or_semicolon> ::= <compound_statement_no_new_scope> | ";";
<declaration_or_expression_statement> ::= identifier <declaration_or_expression_statement_1>;
<declaration_or_expression_statement_1> ::= identifier <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2> | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<statement> ::= <compound_statement> | <simple_statement>;
<simple_statement> ::= <declaration_or_expression_statement> | <selection_statement> | <switch_statement> | <case_label> | <iteration_statement> | <jump_statement>;
<selection_statement> ::= "if" "(" <expression> ")" <selection_rest_statement>;
<selection_rest_statement> ::= <statement> <selection_rest_statement_2>;
<selection_rest_statement_2> ::= "else" <statement> | null;
<switch_statement> ::= "switch" "(" <expression> ")" "{" <switch_statement_list> "}";
<switch_statement_list> ::= <statement_list_nullable>;
<case_label> ::= "case" <expression> ":" | "default" ":";
<iteration_statement> ::= "while" "(" <condition> ")" <statement_no_new_scope> | "do" <statement> "while" "(" <expression> ")" ";" | "for" "(" <for_init_statement> <for_rest_statement> ")" <statement_no_new_scope>;
<for_init_statement> ::= <declaration_or_expression_statement>;
<expression_statement> ::= ";" | <expression> ";";
<declaration_statement> ::= <declaration>;
<declaration> ::= "precision" <precision_qualifier> <type_specifier> ";" | <type_specifier> <declaration_2> | <type_qualifier> <declaration_3>;
<declaration_3> ::= "void" <array_specifier_nullable> <declaration_3_1> | <struct_specifier> <array_specifier_nullable> <declaration_3_2> | ";" | identifier <declaration_3_3>;
<declaration_3_3> ::= <init_declarator_list_2> <semicolon_or_null> | "[" <constant_expression_or_null> "]" <array_specifier_nullable> <declaration_3_3_1> | identifier <declaration_3_3_2> | "{" <struct_declaration_list> "}" <variable_name_or_null> ";";
<semicolon_or_null> ::= ";" | null;
<declaration_3_3_2> ::= "(" <function_parameters_or_null> ")" ";" | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<declaration_3_3_1> ::= identifier <declaration_3_3_1_1> | <init_declarator_list_2>;
<declaration_3_3_1_1> ::= "(" <function_parameters_or_null> ")" ";" | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<declaration_3_2> ::= identifier <declaration_3_2_1> | <init_declarator_list_2>;
<declaration_3_2_1> ::= "(" <function_parameters_or_null> ")" ";" | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<declaration_3_1> ::= identifier <declaration_3_1_1> | <init_declarator_list_2>;
<declaration_3_1_1> ::= "(" <function_parameters_or_null> ")" ";" | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<declaration_2> ::= <init_declarator_list_2> | identifier <declaration_2_1>;
<declaration_2_1> ::= "(" <function_parameters_or_null> ")" ";" | <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2>;
<function_prototype> ::= <type_specifier> identifier "(" <function_parameters_or_null> ")" | <type_qualifier> <type_specifier> identifier "(" <function_parameters_or_null> ")";
<function_declarator> ::= <function_header> <function_parameters_or_null>;
<function_parameters_or_null> ::= <parameter_declaration> <function_header_with_parameters_2> | null;
<function_header_with_parameters> ::= <function_header> <parameter_declaration> <function_header_with_parameters_2>;
<function_header_with_parameters_2> ::= "," <parameter_declaration> <function_header_with_parameters_2> | null;
<function_header> ::= <fully_specified_type> identifier "(";
<parameter_declaration> ::= <type_specifier> <variable_name_or_null> | <type_qualifier> <type_specifier> <variable_name_or_null>;
<parameter_declarator> ::= <type_specifier> identifier <array_specifier_nullable>;
<parameter_type_specifier> ::= <type_specifier>;
<init_declarator_list> ::= <single_declaration> <init_declarator_list_2>;
<init_declarator_list_2> ::= "," identifier <array_specifier_nullable> <equal_initializer_nullable> <init_declarator_list_2> | null;
<equal_initializer_nullable> ::= "=" <initializer> | null;
<initializer> ::= <assignment_expression> | "{" <initializer_list> <comma_or_null> "}";
<initializer_list> ::= <initializer> <initializer_list_2>;
<initializer_list_2> ::= "," <initializer> <initializer_list_2> | null;
<comma_or_null> ::= "," | null;
<single_declaration> ::= <fully_specified_type> <variable_initializer_nullable>;
<variable_initializer_nullable> ::= identifier <array_specifier_nullable> <equal_initializer_nullable> | null;
<identifier_list_or_null> ::= <identifier_list> | null;
<identifier_list> ::= identifier <identifier_list_2>;
<identifier_list_2> ::= "," identifier <identifier_list_2> | null;
<variable_name_or_null> ::= identifier <array_specifier_nullable> | null;
<for_rest_statement> ::= <conditionopt> ";" <expression_or_null>;
<conditionopt> ::= <condition>;
<condition> ::= <expression>;
<statement_no_new_scope> ::= <compound_statement_no_new_scope> | <simple_statement>;
<compound_statement_no_new_scope> ::= "{" <statement_list_nullable> "}";
<jump_statement> ::= "continue" ";" | "break" ";" | "return" <expression_or_null> ";" | "discard" ";";
<expression_or_null> ::= <expression> | null;
<compound_statement> ::= "{" <statement_list_nullable> "}";
<statement_list> ::= <statement> <statement_list_nullable>;
<statement_list_nullable> ::= <statement> <statement_list_nullable> | null;
<expression> ::= <assignment_expression> <expression_2>;
<expression_2> ::= "," <assignment_expression> <expression_2> | null;
<assignment_expression> ::= <unary_expression> <assignment_expression_2>;
<unary_expression> ::= <postfix_expression> | "++" <unary_expression> | "--" <unary_expression> | <unary_operator> <unary_expression>;
<postfix_expression> ::= identifier <postfix_expression_3> | <constant_primary_expression> <postfix_expression_2> | "(" <expression> ")" <postfix_expression_2>;
<postfix_expression_3> ::= "[" <integer_expression> "]" <postfix_expression_3_1> | "." <FIELD_SELECTION> <postfix_expression_2> | "++" <postfix_expression_2> | "--" <postfix_expression_2> | null | "(" <expression_or_void_or_null> ")" <postfix_expression_2>;
<postfix_expression_3_1> ::= <postfix_expression_2> | "(" <expression_or_void_or_null> ")" <postfix_expression_2>;
<postfix_expression_2> ::= "[" <integer_expression> "]" <postfix_expression_2> | "." <FIELD_SELECTION> <postfix_expression_2> | "++" <postfix_expression_2> | "--" <postfix_expression_2> | null;
<FIELD_SELECTION> ::= identifier;
<primary_expression> ::= identifier | <constant_primary_expression> | "(" <expression> ")";
<constant_primary_expression> ::= number | <bool_constant>;
<bool_constant> ::= "true" | "false";
<unary_operator> ::= "+" | "-" | "!" | "~";
<expression_or_void_or_null> ::= <expression> | "void" | null;
<index_selector_nullable> ::= "[" <integer_expression> "]" | null;
<integer_expression> ::= <expression>;
<assignment_expression_2> ::= <multiplicative_expression_2> <additive_expression_2> <shift_expression_2> <relational_expression_2> <equality_expression_2> <and_expression_2> <exclusive_or_expression_2> <inclusive_or_expression_2> <logical_and_expression_2> <logical_xor_expression_2> <logical_or_expression_2> <conditional_expression_2> | <assignment_operator> <assignment_expression>;
<assignment_operator> ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=";
<conditional_expression> ::= <logical_or_expression> <conditional_expression_2>;
<conditional_expression_2> ::= "?" <expression> ":" <assignment_expression> | null;
<logical_or_expression> ::= <logical_xor_expression> <logical_or_expression_2>;
<logical_or_expression_2> ::= "||" <logical_xor_expression> <logical_or_expression_2> | null;
<logical_xor_expression> ::= <logical_and_expression> <logical_xor_expression_2>;
<logical_xor_expression_2> ::= "^^" <logical_and_expression> <logical_xor_expression_2> | null;
<logical_and_expression> ::= <inclusive_or_expression> <logical_and_expression_2>;
<logical_and_expression_2> ::= "&&" <inclusive_or_expression> <logical_and_expression_2> | null;
<inclusive_or_expression> ::= <exclusive_or_expression> <inclusive_or_expression_2>;
<inclusive_or_expression_2> ::= "|" <exclusive_or_expression> <inclusive_or_expression_2> | null;
<exclusive_or_expression> ::= <and_expression> <exclusive_or_expression_2>;
<exclusive_or_expression_2> ::= "^" <and_expression> <exclusive_or_expression_2> | null;
<and_expression> ::= <equality_expression> <and_expression_2>;
<and_expression_2> ::= "&" <equality_expression> <and_expression_2> | null;
<equality_expression> ::= <relational_expression> <equality_expression_2>;
<equality_expression_2> ::= "==" <relational_expression> <equality_expression_2> | "!=" <relational_expression> <equality_expression_2> | null;
<relational_expression> ::= <shift_expression> <relational_expression_2>;
<relational_expression_2> ::= "<" <shift_expression> <relational_expression_2> | ">" <shift_expression> <relational_expression_2> | "<=" <shift_expression> <relational_expression_2> | ">=" <shift_expression> <relational_expression_2> | null;
<shift_expression> ::= <additive_expression> <shift_expression_2>;
<shift_expression_2> ::= "<<" <additive_expression> <shift_expression_2> | ">>" <additive_expression> <shift_expression_2> | null;
<additive_expression> ::= <multiplicative_expression> <additive_expression_2>;
<additive_expression_2> ::= "+" <multiplicative_expression> <additive_expression_2> | "-" <multiplicative_expression> <additive_expression_2> | null;
<multiplicative_expression> ::= <unary_expression> <multiplicative_expression_2>;
<multiplicative_expression_2> ::= "*" <unary_expression> <multiplicative_expression_2> | "/" <unary_expression> <multiplicative_expression_2> | "%" <unary_expression> <multiplicative_expression_2> | null;
<fully_specified_type> ::= <type_specifier> | <type_qualifier> <type_specifier>;
<type_specifier> ::= <type_specifier_nonarray> <array_specifier_nullable>;
<array_specifier> ::= "[" <constant_expression_or_null> "]" <array_specifier_nullable>;
<array_specifier_nullable> ::= "[" <constant_expression_or_null> "]" <array_specifier_nullable> | null;
<constant_expression_or_null> ::= <conditional_expression> | null;
<constant_expression> ::= <conditional_expression>;
<type_specifier_nonarray> ::= "void" | <struct_specifier> | identifier;
<build_in_type> ::= "float" | "double" | "int" | "uint" | "bool" | "vec2" | "vec3" | "vec4" | "dvec2" | "dvec3" | "dvec4" | "bvec2" | "bvec3" | "bvec4" | "ivec2" | "ivec3" | "ivec4" | "uvec2" | "uvec3" | "uvec4" | "mat2" | "mat3" | "mat4" | "mat2x2" | "mat2x3" | "mat2x4" | "mat3x2" | "mat3x3" | "mat3x4" | "mat4x2" | "mat4x3" | "mat4x4" | "dmat2" | "dmat3" | "dmat4" | "dmat2x2" | "dmat2x3" | "dmat2x4" | "dmat3x2" | "dmat3x3" | "dmat3x4" | "dmat4x2" | "dmat4x3" | "dmat4x4" | "atomic_uint" | "sampler1D" | "sampler2D" | "sampler3D" | "samplerCube" | "sampler1DShadow" | "sampler2DShadow" | "samplerCubeShadow" | "sampler1DArray" | "sampler2DArray" | "sampler1DArrayShadow" | "sampler2DArrayShadow" | "samplerCubeArray" | "samplerCubeArrayShadow" | "isampler1D" | "isampler2D" | "isampler3D" | "isamplerCube" | "isampler1DArray" | "isampler2DArray" | "isamplerCubeArray" | "usampler1D" | "usampler2D" | "usampler3D" | "usamplerCube" | "usampler1DArray" | "usampler2DArray" | "usamplerCubeArray" | "sampler2DRect" | "sampler2DRectShadow" | "isampler2DRect" | "usampler2DRect" | "samplerBuffer" | "isamplerBuffer" | "usamplerBuffer" | "sampler2DMS" | "isampler2DMS" | "usampler2DMS" | "sampler2DMSArray" | "isampler2DMSArray" | "usampler2DMSArray" | "image1D" | "iimage1D" | "uimage1D" | "image2D" | "iimage2D" | "uimage2D" | "image3D" | "iimage3D" | "uimage3D" | "image2DRect" | "iimage2DRect" | "uimage2DRect" | "imageCube" | "iimageCube" | "uimageCube" | "imageBuffer" | "iimageBuffer" | "uimageBuffer" | "image1DArray" | "iimage1DArray" | "uimage1DArray" | "image2DArray" | "iimage2DArray" | "uimage2DArray" | "imageCubeArray" | "iimageCubeArray" | "uimageCubeArray" | "image2DMS" | "iimage2DMS" | "uimage2DMS" | "image2DMSArray" | "iimage2DMSArray" | "uimage2DMSArray";
<struct_specifier> ::= "struct" <identifier_or_null> "{" <struct_declaration_list> "}";
<identifier_or_null> ::= identifier | null;
<struct_declaration_list> ::= <struct_declaration> <struct_declaration_list_nullable>;
<struct_declaration_list_nullable> ::= <struct_declaration> <struct_declaration_list_nullable> | null;
<struct_declaration> ::= <type_specifier> <struct_declarator_list> ";" | <type_qualifier> <type_specifier> <struct_declarator_list> ";";
<struct_declarator_list> ::= <struct_declarator> <struct_declarator_list_2>;
<struct_declarator_list_2> ::= "," <struct_declarator> <struct_declarator_list_2> | null;
<struct_declarator> ::= identifier <array_specifier_nullable>;
<type_qualifier> ::= <single_type_qualifier> <type_qualifier_nullable>;
<type_qualifier_nullable> ::= <single_type_qualifier> <type_qualifier_nullable> | null;
<single_type_qualifier> ::= <storage_qualifier> | <layout_qualifier> | <precision_qualifier> | <interpolation_qualifier> | <invariant_qualifier> | <precise_qualifier>;
<storage_qualifier> ::= "const" | "inout" | "in" | "out" | "centroid" | "patch" | "sample" | "uniform" | "buffer" | "shared" | "coherent" | "volatile" | "restrict" | "readonly" | "writeonly" | "subroutine" <subroutine_2>;
<subroutine_2> ::= "(" <type_name_list> ")" | null;
<type_name_list> ::= identifier <type_name_list_2>;
<type_name_list_2> ::= "," identifier <type_name_list_2> | null;
<layout_qualifier> ::= "layout" "(" <layout_qualifier_id_list> ")";
<layout_qualifier_id_list> ::= <layout_qualifier_id> <layout_qualifier_id_list_2>;
<layout_qualifier_id_list_2> ::= "," <layout_qualifier_id> <layout_qualifier_id_list_2> | null;
<layout_qualifier_id> ::= identifier <layout_qualifier_id_2>;
<layout_qualifier_id_2> ::= "=" number | null;
<precision_qualifier> ::= "high_precision" | "medium_precision" | "low_precision";
<interpolation_qualifier> ::= "smooth" | "flat" | "noperspective";
<invariant_qualifier> ::= "invariant";
<precise_qualifier> ::= "precise";
